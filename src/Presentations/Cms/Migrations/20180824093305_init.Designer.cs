// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vnit.Infrastructure.Data;

namespace Vnit.Cms.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20180824093305_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.BasketAggregate.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuyerId");

                    b.HasKey("Id");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.BasketAggregate.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BasketId");

                    b.Property<int>("CatalogItemId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.ToTable("BasketItem");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowCustomersToSelectPageSize");

                    b.Property<int?>("CategoryTemplateId");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInTopMenu");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Name");

                    b.Property<int>("PageSize");

                    b.Property<string>("PageSizeOptions");

                    b.Property<int?>("ParentCategoryId");

                    b.Property<int>("PictureId");

                    b.Property<string>("PriceRanges");

                    b.Property<bool>("Published");

                    b.Property<bool>("ShowOnHomePage");

                    b.Property<bool>("SubjectToAcl");

                    b.Property<DateTime?>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.CategoryTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name");

                    b.Property<string>("ViewPath");

                    b.HasKey("Id");

                    b.ToTable("CategoryTemplate");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdditionalShippingCharge");

                    b.Property<string>("AdminComment");

                    b.Property<bool>("AllowAddingOnlyExistingAttributeCombinations");

                    b.Property<bool>("AllowBackInStockSubscriptions");

                    b.Property<bool>("AllowCustomerReviews");

                    b.Property<string>("AllowedQuantities");

                    b.Property<int>("ApprovedRatingSum");

                    b.Property<int>("ApprovedTotalReviews");

                    b.Property<bool>("AutomaticallyAddRequiredProducts");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc");

                    b.Property<bool>("AvailableForPreOrder");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc");

                    b.Property<int>("BackorderModeId");

                    b.Property<decimal>("BasepriceAmount");

                    b.Property<decimal>("BasepriceBaseAmount");

                    b.Property<int>("BasepriceBaseUnitId");

                    b.Property<bool>("BasepriceEnabled");

                    b.Property<int>("BasepriceUnitId");

                    b.Property<bool>("CallForPrice");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("CustomerEntersPrice");

                    b.Property<bool>("Deleted");

                    b.Property<int>("DeliveryDateId");

                    b.Property<bool>("DisableBuyButton");

                    b.Property<bool>("DisableWishlistButton");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("DisplayStockAvailability");

                    b.Property<bool>("DisplayStockQuantity");

                    b.Property<int>("DownloadActivationTypeId");

                    b.Property<int?>("DownloadExpirationDays");

                    b.Property<int>("DownloadId");

                    b.Property<string>("Full");

                    b.Property<int>("GiftCardTypeId");

                    b.Property<string>("Gtin");

                    b.Property<bool>("HasDiscountsApplied");

                    b.Property<bool>("HasSampleDownload");

                    b.Property<bool>("HasTierPrices");

                    b.Property<bool>("HasUserAgreement");

                    b.Property<decimal>("Height");

                    b.Property<bool>("IsDownload");

                    b.Property<bool>("IsFreeShipping");

                    b.Property<bool>("IsGiftCard");

                    b.Property<bool>("IsRecurring");

                    b.Property<bool>("IsRental");

                    b.Property<bool>("IsShipEnabled");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<bool>("IsTelecommunicationsOrBroadcastingOrElectronicServices");

                    b.Property<decimal>("Length");

                    b.Property<bool>("LimitedToStores");

                    b.Property<int>("LowStockActivityId");

                    b.Property<int>("ManageInventoryMethodId");

                    b.Property<string>("ManufacturerPartNumber");

                    b.Property<bool>("MarkAsNew");

                    b.Property<DateTime?>("MarkAsNewEndDateTimeUtc");

                    b.Property<DateTime?>("MarkAsNewStartDateTimeUtc");

                    b.Property<int>("MaxNumberOfDownloads");

                    b.Property<decimal>("MaximumCustomerEnteredPrice");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<int>("MinStockQuantity");

                    b.Property<decimal>("MinimumCustomerEnteredPrice");

                    b.Property<string>("Name");

                    b.Property<int>("NotApprovedRatingSum");

                    b.Property<int>("NotApprovedTotalReviews");

                    b.Property<bool>("NotReturnable");

                    b.Property<int>("NotifyAdminForQuantityBelow");

                    b.Property<decimal>("OldPrice");

                    b.Property<int>("OrderMaximumQuantity");

                    b.Property<int>("OrderMinimumQuantity");

                    b.Property<decimal?>("OverriddenGiftCardAmount");

                    b.Property<int>("ParentGroupedProductId");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDateTimeUtc");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductAvailabilityRangeId");

                    b.Property<decimal>("ProductCost");

                    b.Property<int>("ProductTemplateId");

                    b.Property<int>("ProductTypeId");

                    b.Property<bool>("Published");

                    b.Property<int>("RecurringCycleLength");

                    b.Property<int>("RecurringCyclePeriodId");

                    b.Property<int>("RecurringTotalCycles");

                    b.Property<int>("RentalPriceLength");

                    b.Property<int>("RentalPricePeriodId");

                    b.Property<bool>("RequireOtherProducts");

                    b.Property<string>("RequiredProductIds");

                    b.Property<int>("SampleDownloadId");

                    b.Property<bool>("ShipSeparately");

                    b.Property<string>("Short");

                    b.Property<bool>("ShowOnHomePage");

                    b.Property<string>("Sku");

                    b.Property<int>("StockQuantity");

                    b.Property<bool>("SubjectToAcl");

                    b.Property<int>("TaxCategoryId");

                    b.Property<bool>("UnlimitedDownloads");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<bool>("UseMultipleWarehouses");

                    b.Property<string>("UserAgreementText");

                    b.Property<int>("VendorId");

                    b.Property<bool>("VisibleIndividually");

                    b.Property<int>("WarehouseId");

                    b.Property<decimal>("Weight");

                    b.Property<decimal>("Width");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsFeatured");

                    b.Property<int>("ManufacturerId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductManufacturer");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("MediaId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("CustomerNotifiedOfReply");

                    b.Property<int>("HelpfulNoTotal");

                    b.Property<int>("HelpfulYesTotal");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("ProductId");

                    b.Property<int>("Rating");

                    b.Property<string>("ReplyText");

                    b.Property<string>("ReviewText");

                    b.Property<int>("StoreId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("IgnoredProductTypes");

                    b.Property<string>("Name");

                    b.Property<string>("ViewPath");

                    b.HasKey("Id");

                    b.ToTable("ProductTemplate");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.CatalogBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand");

                    b.HasKey("Id");

                    b.ToTable("CatalogBrands");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogBrandId");

                    b.Property<int>("CatalogTypeId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("PictureUri");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("CatalogBrandId");

                    b.HasIndex("CatalogTypeId");

                    b.ToTable("CatalogItems");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.CatalogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("CatalogTypes");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("Company");

                    b.Property<int?>("CountryId");

                    b.Property<string>("County");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("CustomAttributes");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("StateProvinceId");

                    b.Property<string>("ZipPostalCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Common.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowsBilling");

                    b.Property<bool>("AllowsShipping");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name");

                    b.Property<int>("NumericIsoCode");

                    b.Property<bool>("Published");

                    b.Property<bool>("SubjectToVat");

                    b.Property<string>("ThreeLetterIsoCode");

                    b.Property<string>("TwoLetterIsoCode");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Common.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation");

                    b.Property<int>("CountryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Courses.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllowDuration");

                    b.Property<string>("Body");

                    b.Property<int>("CourseId");

                    b.Property<int>("Duration");

                    b.Property<DateTime?>("EndOnUtc");

                    b.Property<bool>("Finished");

                    b.Property<string>("Name");

                    b.Property<decimal>("Point");

                    b.Property<DateTime>("StartOnUtc");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Credits");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<int?>("ModifyBy");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.Property<string>("Thumbnail");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Courses.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int?>("Grade");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Courses.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("DownloadUrl");

                    b.Property<int?>("Duration");

                    b.Property<bool>("IsAutoplay");

                    b.Property<int?>("ModifyBy");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Name");

                    b.Property<int>("Pageview");

                    b.Property<bool>("Published");

                    b.Property<string>("SourcecodeUrl");

                    b.Property<string>("Thumbnail");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AdminComment");

                    b.Property<int>("AffiliateId");

                    b.Property<int?>("BillingAddressId");

                    b.Property<DateTime?>("CannotLoginUntilDateUtc");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<Guid>("CustomerGuid");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email");

                    b.Property<string>("EmailToRevalidate");

                    b.Property<int>("FailedLoginAttempts");

                    b.Property<bool>("HasShoppingCartItems");

                    b.Property<bool>("IsSystemAccount");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<DateTime>("LastActivityDateUtc");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<int>("RegisteredInStoreId");

                    b.Property<bool>("RequireReLogin");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<string>("SystemName");

                    b.Property<string>("Username");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Emails.EmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email");

                    b.Property<bool>("EnableSsl");

                    b.Property<string>("Host");

                    b.Property<bool?>("IsDefault");

                    b.Property<string>("Password");

                    b.Property<int>("Port");

                    b.Property<bool>("UseDefaultCredentials");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("EmailAccount");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Emails.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdministrationEmail");

                    b.Property<int>("AttachedDownloadId");

                    b.Property<string>("BccEmailAddresses");

                    b.Property<string>("Body");

                    b.Property<int?>("DelayBeforeSend");

                    b.Property<int>("DelayPeriod");

                    b.Property<int>("DelayPeriodId");

                    b.Property<int>("EmailAccountId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsMaster");

                    b.Property<bool>("IsSystem");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentEmailTemplateId");

                    b.Property<string>("Subject");

                    b.Property<string>("Template");

                    b.Property<string>("TemplateSystemName");

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.HasIndex("ParentEmailTemplateId");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Emails.NewsLetterSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<Guid>("NewsLetterSubscriptionGuid");

                    b.Property<int>("StatusId");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.ToTable("NewsLetterSubscription");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Emails.QueuedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachedDownloadId");

                    b.Property<string>("AttachmentFileName");

                    b.Property<string>("AttachmentFilePath");

                    b.Property<string>("Bcc");

                    b.Property<string>("Body");

                    b.Property<string>("CC");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime?>("DontSendBeforeDateUtc");

                    b.Property<int>("EmailAccountId");

                    b.Property<string>("From");

                    b.Property<string>("FromName");

                    b.Property<int>("Priority");

                    b.Property<int>("PriorityId");

                    b.Property<string>("ReplyTo");

                    b.Property<string>("ReplyToName");

                    b.Property<DateTime?>("SentOnUtc");

                    b.Property<int>("SentTries");

                    b.Property<string>("Subject");

                    b.Property<string>("To");

                    b.Property<string>("ToName");

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("QueuedEmail");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.EntityProperties.EntityProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName");

                    b.Property<DateTime?>("ExpiredDate");

                    b.Property<string>("PropertyName");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("EntityProperty");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Faqs.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("FaqCategoryId");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<int?>("ModifyBy");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Name");

                    b.Property<int>("Pageview");

                    b.Property<int?>("Sequence");

                    b.Property<string>("Short");

                    b.Property<int>("Type");

                    b.Property<int?>("Version");

                    b.Property<string>("answer");

                    b.Property<int>("faq_status");

                    b.HasKey("Id");

                    b.HasIndex("FaqCategoryId");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Faqs.FaqCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ModifyBy");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<int>("Sequence");

                    b.HasKey("Id");

                    b.ToTable("FaqCategory");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Localization.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DefaultCurrencyId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("FlagImageFileName");

                    b.Property<string>("LanguageCulture");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.Property<bool>("Rtl");

                    b.Property<string>("UniqueSeoCode");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Localization.LocaleStringResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<string>("ResourceName");

                    b.Property<string>("ResourceValue");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocaleStringResource");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Localization.LocalizedProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("LocaleKey");

                    b.Property<string>("LocaleKeyGroup");

                    b.Property<string>("LocaleValue");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedProperty");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Manufacturers.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Icon");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentManufacturerId");

                    b.Property<bool>("Published");

                    b.Property<DateTime?>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.MediaAggregate.EntityMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName");

                    b.Property<int>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("EntityMedia");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.MediaAggregate.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeText");

                    b.Property<byte[]>("Binary");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsFeatured");

                    b.Property<string>("LocalPath");

                    b.Property<int>("MediaType");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<string>("SystemName");

                    b.Property<string>("ThumbnailPath");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Menus.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Icon");

                    b.Property<bool?>("IsSystem");

                    b.Property<int?>("ModifyBy");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Name");

                    b.Property<bool>("NewWindow");

                    b.Property<int?>("ParentId");

                    b.Property<int>("PositionId");

                    b.Property<int>("Sequence");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.NewsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DisplayOrder");

                    b.Property<int?>("ModifyBy");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Short");

                    b.HasKey("Id");

                    b.ToTable("NewsCategory");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.NewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText");

                    b.Property<string>("CommentTitle");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("NewsItemId");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NewsItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("NewsComment");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.NewsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComments");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("DisplayOrder");

                    b.Property<DateTime?>("EndDateUtc");

                    b.Property<string>("Full");

                    b.Property<int>("LanguageId");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Name");

                    b.Property<int>("Pageview");

                    b.Property<bool>("Published");

                    b.Property<string>("Short");

                    b.Property<DateTime?>("StartDateUtc");

                    b.Property<string>("Thumbnail");

                    b.Property<DateTime?>("UpdatedOnUtc");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("NewsItem");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.NewsItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("NewsCategoryId");

                    b.Property<int>("NewsItemId");

                    b.HasKey("Id");

                    b.HasIndex("NewsCategoryId");

                    b.HasIndex("NewsItemId");

                    b.ToTable("NewsItemCategory");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.NewsItemTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("NewsItemId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("NewsItemId");

                    b.HasIndex("TagId");

                    b.ToTable("NewsItemTag");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName");

                    b.Property<int>("InitiatorId");

                    b.Property<string>("InitiatorName");

                    b.Property<bool>("IsRead");

                    b.Property<int?>("NotificationEventId");

                    b.Property<DateTime>("PublishDateTime");

                    b.Property<DateTime?>("ReadDateTime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NotificationEventId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Notifications.NotificationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<string>("EventName");

                    b.HasKey("Id");

                    b.ToTable("NotificationEvent");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.OrderAggregate.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliateId");

                    b.Property<bool>("AllowStoringCreditCardNumber");

                    b.Property<string>("AuthorizationTransactionCode");

                    b.Property<string>("AuthorizationTransactionId");

                    b.Property<string>("AuthorizationTransactionResult");

                    b.Property<int>("BillingAddressId");

                    b.Property<string>("BuyerId");

                    b.Property<string>("CaptureTransactionId");

                    b.Property<string>("CaptureTransactionResult");

                    b.Property<string>("CardCvv2");

                    b.Property<string>("CardExpirationMonth");

                    b.Property<string>("CardExpirationYear");

                    b.Property<string>("CardName");

                    b.Property<string>("CardNumber");

                    b.Property<string>("CardType");

                    b.Property<string>("CheckoutAttributeDescription");

                    b.Property<string>("CheckoutAttributesXml");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<decimal>("CurrencyRate");

                    b.Property<string>("CustomOrderNumber");

                    b.Property<string>("CustomValuesXml");

                    b.Property<string>("CustomerCurrencyCode");

                    b.Property<int>("CustomerId");

                    b.Property<string>("CustomerIp");

                    b.Property<int>("CustomerLanguageId");

                    b.Property<int>("CustomerTaxDisplayTypeId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("MaskedCreditCardNumber");

                    b.Property<DateTimeOffset>("OrderDate");

                    b.Property<decimal>("OrderDiscount");

                    b.Property<Guid>("OrderGuid");

                    b.Property<decimal>("OrderShippingExclTax");

                    b.Property<decimal>("OrderShippingInclTax");

                    b.Property<int>("OrderStatus");

                    b.Property<int>("OrderStatusId");

                    b.Property<decimal>("OrderSubTotalDiscountExclTax");

                    b.Property<decimal>("OrderSubTotalDiscountInclTax");

                    b.Property<decimal>("OrderSubtotalExclTax");

                    b.Property<decimal>("OrderSubtotalInclTax");

                    b.Property<decimal>("OrderTax");

                    b.Property<decimal>("OrderTotal");

                    b.Property<DateTime?>("PaidDateUtc");

                    b.Property<decimal>("PaymentMethodAdditionalFeeExclTax");

                    b.Property<decimal>("PaymentMethodAdditionalFeeInclTax");

                    b.Property<string>("PaymentMethodSystemName");

                    b.Property<int>("PaymentStatus");

                    b.Property<int>("PaymentStatusId");

                    b.Property<bool>("PickUpInStore");

                    b.Property<int?>("PickupAddressId");

                    b.Property<decimal>("RefundedAmount");

                    b.Property<int?>("RewardPointsHistoryEntryId");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<string>("ShippingMethod");

                    b.Property<string>("ShippingRateComputationMethodSystemName");

                    b.Property<int>("ShippingStatusId");

                    b.Property<int>("StoreId");

                    b.Property<string>("SubscriptionTransactionId");

                    b.Property<string>("TaxRates");

                    b.Property<string>("VatNumber");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PickupAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.OrderAggregate.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeDescription");

                    b.Property<string>("AttributesXml");

                    b.Property<decimal>("DiscountAmountExclTax");

                    b.Property<decimal>("DiscountAmountInclTax");

                    b.Property<int>("DownloadCount");

                    b.Property<bool>("IsDownloadActivated");

                    b.Property<decimal?>("ItemWeight");

                    b.Property<int?>("LicenseDownloadId");

                    b.Property<int>("OrderId");

                    b.Property<Guid>("OrderItemGuid");

                    b.Property<decimal>("OriginalProductCost");

                    b.Property<decimal>("PriceExclTax");

                    b.Property<decimal>("PriceInclTax");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime?>("RentalEndDateUtc");

                    b.Property<DateTime?>("RentalStartDateUtc");

                    b.Property<decimal>("UnitPriceExclTax");

                    b.Property<decimal>("UnitPriceInclTax");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.OrderAggregate.OrderNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("DisplayToCustomer");

                    b.Property<int>("DownloadId");

                    b.Property<string>("Note");

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderNote");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Pages.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Body");

                    b.Property<int?>("CreateBy");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifyBy");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Name");

                    b.Property<bool>("ShowInMenu");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Polls.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowGuestsToVote");

                    b.Property<int>("DisplayOrder");

                    b.Property<DateTime?>("EndDateUtc");

                    b.Property<int>("LanguageId");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.Property<bool>("ShowOnHomePage");

                    b.Property<DateTime?>("StartDateUtc");

                    b.Property<string>("SystemKeyword");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Poll");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Polls.PollAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfVotes");

                    b.Property<int>("PollId");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollAnswer");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Polls.PollVotingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<int>("PollAnswerId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PollAnswerId");

                    b.ToTable("PollVotingRecord");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Security.PermissionRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("SystemName");

                    b.HasKey("Id");

                    b.ToTable("PermissionRecord");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Security.PermissionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionRecordId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionRecordId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSystemRole");

                    b.Property<string>("RoleName");

                    b.Property<string>("SystemName");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Seo.UrlRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Slug");

                    b.HasKey("Id");

                    b.ToTable("UrlRecord");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Settings.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName");

                    b.Property<string>("Name");

                    b.Property<int>("StoreId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Shipping.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime?>("DeliveryDateUtc");

                    b.Property<int>("OrderId");

                    b.Property<DateTime?>("ShippedDateUtc");

                    b.Property<decimal?>("TotalWeight");

                    b.Property<string>("TrackingNumber");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Shipping.ShipmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderItemId");

                    b.Property<int>("Quantity");

                    b.Property<int>("ShipmentId");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentItem");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Skills.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("FeaturedImageId");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Skills.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("ExternalUrl");

                    b.Property<int>("SkillId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkill");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Stores.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyAddress");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyPhoneNumber");

                    b.Property<string>("CompanyVat");

                    b.Property<int>("DefaultLanguageId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Hosts");

                    b.Property<string>("Name");

                    b.Property<bool>("SslEnabled");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<DateTime?>("BirthDay");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int?>("CustomerType");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email");

                    b.Property<int>("FailedLoginAttempts");

                    b.Property<string>("FullName");

                    b.Property<int?>("Gender");

                    b.Property<Guid>("Guid");

                    b.Property<string>("IdentityCard");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsSystemAccount");

                    b.Property<DateTime?>("LastActivityDateUtc");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<string>("Password");

                    b.Property<int>("PasswordFormat");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<int?>("ProvinceId");

                    b.Property<string>("Remarks");

                    b.Property<string>("StudentCategory");

                    b.Property<string>("StudentUniversity");

                    b.Property<int?>("StudentYear");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.BasketAggregate.BasketItem", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.BasketAggregate.Basket")
                        .WithMany("Items")
                        .HasForeignKey("BasketId");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductCategory", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Catalog.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Catalog.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductManufacturer", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Catalog.Product", "Product")
                        .WithMany("ProductManufacturers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductMedia", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.MediaAggregate.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Catalog.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Catalog.ProductReview", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Catalog.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.CatalogItem", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.CatalogBrand", "CatalogBrand")
                        .WithMany()
                        .HasForeignKey("CatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.CatalogType", "CatalogType")
                        .WithMany()
                        .HasForeignKey("CatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Common.Address", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Vnit.ApplicationCore.Entities.Common.StateProvince", "StateProvince")
                        .WithMany()
                        .HasForeignKey("StateProvinceId");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Common.StateProvince", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Common.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Courses.Assessment", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Courses.Enrollment", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Courses.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Courses.Lesson", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Emails.EmailTemplate", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Emails.EmailAccount", "EmailAccount")
                        .WithMany()
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Emails.EmailTemplate", "ParentEmailTemplate")
                        .WithMany()
                        .HasForeignKey("ParentEmailTemplateId");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Emails.QueuedEmail", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Emails.EmailAccount", "EmailAccount")
                        .WithMany()
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Faqs.FAQ", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Faqs.FaqCategory", "FaqCategory")
                        .WithMany("Faqs")
                        .HasForeignKey("FaqCategoryId");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Localization.LocaleStringResource", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Localization.LocalizedProperty", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.MediaAggregate.EntityMedia", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.MediaAggregate.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.NewsComment", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.News.NewsItem", "NewsItem")
                        .WithMany("NewsComments")
                        .HasForeignKey("NewsItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.NewsItem", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.NewsItemCategory", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.News.NewsCategory", "NewsCategory")
                        .WithMany()
                        .HasForeignKey("NewsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.News.NewsItem", "NewsItem")
                        .WithMany("NewsItemCategories")
                        .HasForeignKey("NewsItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.News.NewsItemTag", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.News.NewsItem", "NewsItem")
                        .WithMany("NewsItemTags")
                        .HasForeignKey("NewsItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.News.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Notifications.NotificationEvent", "NotificationEvent")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationEventId");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.OrderAggregate.Order", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Common.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Common.Address", "PickupAddress")
                        .WithMany()
                        .HasForeignKey("PickupAddressId");

                    b.HasOne("Vnit.ApplicationCore.Entities.Common.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.OrderAggregate.OrderItem", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.OrderAggregate.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.OrderAggregate.OrderNote", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.OrderAggregate.Order", "Order")
                        .WithMany("OrderNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Polls.Poll", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Polls.PollAnswer", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Polls.Poll", "Poll")
                        .WithMany("PollAnswers")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Polls.PollVotingRecord", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Polls.PollAnswer", "PollAnswer")
                        .WithMany("PollVotingRecords")
                        .HasForeignKey("PollAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Security.PermissionRole", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Security.PermissionRecord", "PermissionRecord")
                        .WithMany()
                        .HasForeignKey("PermissionRecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Security.Role", "Role")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Shipping.Shipment", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.OrderAggregate.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Shipping.ShipmentItem", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Shipping.Shipment", "Shipment")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Skills.UserSkill", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Skills.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vnit.ApplicationCore.Entities.Users.UserRole", b =>
                {
                    b.HasOne("Vnit.ApplicationCore.Entities.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vnit.ApplicationCore.Entities.Users.User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
